
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:line_awesome_flutter/line_awesome_flutter.dart';
import 'package:stage_project/Screens/Acceuil/components/background.dart';
import 'package:get/get.dart';
import 'package:stage_project/Screens/EmployeeEdit/employee_edit.dart';
import 'package:stage_project/Screens/Forum/forum.dart';
import 'package:stage_project/Screens/Inquiries/inquiries.dart';
import 'package:stage_project/Screens/Login/login_screen.dart';
import 'package:stage_project/Screens/Settings/settings.dart';
import 'package:stage_project/components/edit_button.dart';
import 'package:stage_project/components/menu_profil.dart';
import 'dart:io';
import 'package:flutter_rating_bar/flutter_rating_bar.dart'; // Importez le package de notation
import 'package:http/http.dart' as http;

class Body extends StatefulWidget {
  final String email;
  final String nom;
  final String prenom;
  final String cin;
  final String image;
  final String role;
  final int id;
  Body({
    required this.email,
    required this.nom,
    required this.prenom,
    required this.cin,
    required this.image,
    required this.role,
    required this.id,
  });

  @override
  _BodyState createState() => _BodyState();
}

Future<void> _refreshPage() async {
  await Future.delayed(Duration(seconds: 2));
}
class _BodyState extends State<Body> {

  @override
  Widget build(BuildContext context) {
    return Background(
      child: SingleChildScrollView(
        child: Container(
          margin: EdgeInsets.only(bottom: 300),
          padding: const EdgeInsets.all(10),
          child: Column(
            children: [

            ],
          ),
        ),
      ),
    );
  }
}












































import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';

class EmployeeMessage {
  final String cin;
  final String email;
  final String nom;
  final String prenom;
  final String image;
  final List<String> messages;
  bool isCommenting;

  EmployeeMessage({
    required this.cin,
    required this.email,
    required this.nom,
    required this.prenom,
    required this.image,
    required this.messages,
    this.isCommenting = false,
  });

  factory EmployeeMessage.fromJson(Map<String, dynamic> json) {
    return EmployeeMessage(
      cin: json['cin'],
      email: json['email'],
      nom: json['nom'],
      prenom: json['prenom'],
      image: json['image'],
      messages: List<String>.from(json['messages']),
    );
  }
}

class Forum extends StatelessWidget {
  Future<List<EmployeeMessage>> fetchEmployeeMessages() async {
    final response = await http.get(Uri.parse('https://3f02-102-157-69-97.ngrok.io/afficher_employees_messages'));

    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      return data.map((json) => EmployeeMessage.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load employee messages');
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ForumScreen(fetchEmployeeMessages()),
    );
  }
}

class ForumScreen extends StatelessWidget {
  final Future<List<EmployeeMessage>> employeeMessages;

  ForumScreen(this.employeeMessages);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FutureBuilder<List<EmployeeMessage>>(
        future: employeeMessages,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return ListView.builder(
              itemCount: snapshot.data!.length,
              itemBuilder: (context, index) {
                final employeeMessage = snapshot.data![index];
                return EmployeeMessageCard(employeeMessage);
              },
            );
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else {
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }
}

class EmployeeMessageCard extends StatefulWidget {
  final EmployeeMessage employeeMessage;

  EmployeeMessageCard(this.employeeMessage);

  @override
  _EmployeeMessageCardState createState() => _EmployeeMessageCardState();
}

class _EmployeeMessageCardState extends State<EmployeeMessageCard> {
  String comment = "";

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: EdgeInsets.all(10),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ListTile(
            leading: ClipRRect(
              borderRadius: BorderRadius.circular(100),
              child: Image.file(
                File(widget.employeeMessage.image),
                width: 80,
                height: 80,
                fit: BoxFit.cover,
              ),
            ),
            title: Text(
              '${widget.employeeMessage.nom} ${widget.employeeMessage.prenom}',
              style: TextStyle(fontSize: 20),
            ),
            subtitle: Padding(
              padding: EdgeInsets.all(10),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  for (var message in widget.employeeMessage.messages)
                    Padding(
                      padding: EdgeInsets.symmetric(vertical: 8),
                      child: Text(
                        message,
                        style: TextStyle(fontSize: 20),
                      ),
                    ),
                  SizedBox(height: 10),
                  GestureDetector(
                    onTap: () {
                      setState(() {
                        widget.employeeMessage.isCommenting =
                        !widget.employeeMessage.isCommenting;
                      });
                    },
                    child: Row(
                      children: [
                        Icon(
                          Icons.comment,
                          color: Colors.grey,
                          size: 30,
                        ),
                        SizedBox(width: 5),
                        Text(
                          'answer',
                          style: TextStyle(
                              color: Colors.grey,
                              fontSize: 26
                          ),
                        ),
                      ],
                    ),
                  ),
                  if (widget.employeeMessage.isCommenting)
                    Column(
                      children: [
                        Row(
                          children: [
                            Expanded(
                              child: TextField(
                                onChanged: (value) {
                                  setState(() {
                                    comment = value;
                                  });
                                },
                                decoration: InputDecoration(
                                  hintText: 'Enter your comment...',
                                  contentPadding: EdgeInsets.symmetric(
                                    vertical: 10,
                                    horizontal: 15,
                                  ),
                                  border: OutlineInputBorder(),
                                ),
                              ),
                            ),
                            SizedBox(width: 10),
                            Container(
                              color: Colors.transparent,
                              child: ElevatedButton(
                                onPressed: () {
                                  // Traitez le commentaire ici (par exemple, l'envoyer au serveur)
                                  setState(() {
                                    //  widget.employeeMessage.isCommenting = false;
                                    // comment = "";
                                  });
                                },
                                style: ElevatedButton.styleFrom(
                                  primary: Colors.transparent, // Couleur de fond transparente
                                  shadowColor: Colors.transparent, // Couleur d'ombre transparente
                                ),
                                child: Icon(Icons.send),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                ],
              ),
            ),
          ),

        ],
      ),
    );
  }
}

void main() {
  runApp(Forum());
}







































=========================================================================================================================================================================


import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:stage_project/components/inquiries_field_text.dart';

class Body extends StatefulWidget {
  final int id;

  Body({
    required this.id,
  });

  @override
  _BodyState createState() => _BodyState();
}

class _BodyState extends State<Body> {
  List<Map<String, dynamic>> employees = [];
  int _selectedQuestionIndex = -1; // Variable pour suivre la question sélectionnée
  String _commentController = '';
  List<dynamic> employeeResponses = []; // Liste pour stocker les réponses des employés

  // Méthode pour récupérer les messages des employés
  Future<void> fetchEmployeesMessages() async {
    final response = await http.get(
        Uri.parse('https://fb77-197-2-151-131.ngrok.io/afficher_employees_messages'));
    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      setState(() {
        employees = List<Map<String, dynamic>>.from(data);
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  // Méthode pour récupérer les réponses des employés
  Future<void> fetchEmployeeResponses() async {
    final response = await http.get(
        Uri.parse('https://fb77-197-2-151-131.ngrok.io/afficher_reponses_employes'));
    if (response.statusCode == 200) {
      setState(() {
        employeeResponses = json.decode(response.body);
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  @override
  void initState() {
    super.initState();
    fetchEmployeesMessages();
    fetchEmployeeResponses(); // Appel pour récupérer les réponses des employés
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: <Widget>[
        Expanded(
          child: ListView.builder(
            itemCount: employees.length,
            itemBuilder: (context, index) {
              var employee = employees[index];
              List<dynamic> messages = List<dynamic>.from(employee['messages'] ?? []);
              List<String> questionTexts = messages
                  .where((msg) => msg is String)
                  .cast<String>()
                  .toList();
              var employeeResponse = employeeResponses.firstWhere(
                    (response) => response['employee_id'] == employee['id'],
                orElse: () => null,
              );

              return Column(
                children: [
                  ListTile(
                    title: Row(
                      children: [
                        // Code existant pour les informations sur l'employé
                        SizedBox(
                          width: 80,
                          height: 80,
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(100),
                            child: Image.file(
                              File(employee['image']),
                            ),
                          ),
                        ),
                        SizedBox(width: 10),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('${employee['nom']} ${employee['prenom']}'),
                            SizedBox(height: 5),
                            Text(
                              '${questionTexts.join(', ')}',
                              style: TextStyle(fontSize: 20),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.comment),
                                  onPressed: () {
                                    setState(() {
                                      _selectedQuestionIndex = index;
                                    });
                                  },
                                ),
                                IconButton(
                                  icon: Icon(Icons.thumb_up),
                                  onPressed: () {
                                    // Implémentez la logique pour aimer le message
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  if (_selectedQuestionIndex == index)
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: InquiriesRoundedField(
                              onChanged: (value) {
                                setState(() {
                                  _commentController = value;
                                });
                              },
                              hintText: 'Entrez votre réponse...',
                            ),
                          ),
                          IconButton(
                            icon: Icon(Icons.send),
                            onPressed: () async {
                              final response = await http.post(
                                Uri.parse('https://fb77-197-2-151-131.ngrok.io/enregistrer_reponse'),
                                body: jsonEncode({
                                  'employee_id': widget.id,
                                  'question_id': employee['id'], // Remplacez par l'ID de la question réelle
                                  'reponse_text': _commentController,
                                }),
                                headers: {'Content-Type': 'application/json'},
                              );

                              print('Code de statut de la réponse : ${response.statusCode}');
                              print('Corps de la réponse : ${response.body}');

                              if (response.statusCode == 201) {
                                // ...
                              } else {
                                // ...
                              }
                              setState(() {
                                _selectedQuestionIndex = -1;
                              });
                            },
                          ),
                        ],
                      ),
                    ),
                ],
              );
            },
          ),
        ),
      ],
    );
  }
}











































import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class Body extends StatefulWidget {
  final int id;

  Body({
    required this.id,
  });

  @override
  _BodyState createState() => _BodyState();
}

class _BodyState extends State<Body> {
  List<Map<String, dynamic>> employees = [];
  int _selectedQuestionIndex = -1;
  String _commentController = '';
  Map<int, List<dynamic>> employeeResponses = {}; // Map pour stocker les réponses des employés par ID de question

  Future<void> fetchEmployeesMessages() async {
    final response = await http.get(
        Uri.parse('https://429e-197-2-151-131.ngrok.io/afficher_employees_messages'));
    if (response.statusCode == 200) {
      final List<dynamic> data = json.decode(response.body);
      setState(() {
        employees = List<Map<String, dynamic>>.from(data);
      });
    } else {
      throw Exception('Failed to load data');
    }

    for (var employee in employees) {
      final questionId = employee['id'];
      final response = await http.get(Uri.parse(
          'https://429e-197-2-151-131.ngrok.io/afficher_reponses_employes/$questionId'));
      if (response.statusCode == 200) {
        final List<dynamic> responseData = json.decode(response.body);
        employeeResponses[questionId] = responseData;
      } else {
        print('Failed to load responses for question $questionId');
      }
    }
  }
  Future<void> _refreshPage() async {
    await Future.delayed(Duration(seconds: 2));
  }
  @override
  void initState() {
    super.initState();
    _refreshPage();
    fetchEmployeesMessages();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: <Widget>[
        Expanded(
          child: ListView.builder(
            itemCount: employees.length,
            itemBuilder: (context, index) {
              var employee = employees[index];
              List<dynamic> messages = List<dynamic>.from(employee['messages'] ?? []);
              List<String> questionTexts = messages
                  .where((msg) => msg is String)
                  .cast<String>()
                  .toList();

              return Column(
                children: [
                  ListTile(
                    title: Row(
                      children: [
                        SizedBox(
                          width: 80,
                          height: 80,
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(100),
                            child: Image.file(
                              File(employee['image']),
                            ),
                          ),
                        ),
                        SizedBox(width: 10),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('${employee['nom']} ${employee['prenom']}'),
                            SizedBox(height: 5),
                            Text(
                              '${questionTexts.join(', ')}',
                              style: TextStyle(fontSize: 20),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.comment),
                                  onPressed: () {
                                    setState(() {
                                      _selectedQuestionIndex = index;
                                    });
                                  },
                                ),
                                IconButton(
                                  icon: Icon(Icons.thumb_up),
                                  onPressed: () {
                                    // Implémentez la logique pour aimer le message
                                  },
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  if (_selectedQuestionIndex == index)
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        children: [
                          Expanded(
                            child: TextFormField(
                              onChanged: (value) {
                                setState(() {
                                  _commentController = value;
                                });
                              },
                              decoration: InputDecoration(
                                hintText: 'Entrez votre réponse...',
                              ),
                            ),
                          ),
                          IconButton(
                            icon: Icon(Icons.send),
                            onPressed: () async {
                              if (_commentController.isNotEmpty) {
                                final response = await http.post(
                                  Uri.parse(
                                      'https://429e-197-2-151-131.ngrok.io/enregistrer_reponse'),
                                  body: jsonEncode({
                                    'employee_id': widget.id,
                                    'question_id': employee['id'],
                                    'reponse_text': _commentController,
                                  }),
                                  headers: {'Content-Type': 'application/json'},
                                );

                                print('Code de statut de la réponse : ${response.statusCode}');
                                print('Corps de la réponse : ${response.body}');

                                if (response.statusCode == 201) {
                                  // Gérer le succès
                                } else {
                                  // Gérer l'échec
                                }
                                setState(() {
                                  _selectedQuestionIndex = -1;
                                });
                              }
                            },
                          ),
                        ],
                      ),
                    ),
                  if (_selectedQuestionIndex != index && employeeResponses.containsKey(employee['id']))
                    Column(
                      children: [
                        if (employeeResponses[employee['id']] != null)
                          for (var response in employeeResponses[employee['id']]!)
                            ListTile(
                              title: Text(
                                  'Réponse de ${response['employee_nom']} ${response['employee_prenom']}:'),
                              subtitle: Text(response['reponse_text']),
                              leading: CircleAvatar(
                                backgroundImage: NetworkImage(
                                    response['employee_image']), // Assurez-vous que 'employee_image' est correct
                              ),
                              trailing: Text(response['reponse_created_at']),
                            ),
                      ],
                    ),
                ],
              );
            },
          ),
        ),
      ],
    );
  }
}
































































 SingleChildScrollView(
        child: Center( // Wrap the Container with Center
          child: Container(
            margin: EdgeInsets.only(bottom: 300),
            padding: const EdgeInsets.all(10),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center, // Center the content vertically
              children: [
                SizedBox(
                  width: 120,
                  height: 120,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(100),
                    child: Image.file(
                      File(image),
                    ),
                  ),
                ),
                SizedBox(height: 10),
                Text(nom + " " + prenom,
                    style: Theme.of(context).textTheme.headlineSmall),
                Text(email, style: Theme.of(context).textTheme.bodySmall),
                SizedBox(height: 20),
                InquiriesRoundedField(
                  onChanged: (value) {
                    setState(() {
                      questionText = value;
                    });
                  },
                  hintText: 'Enter your text...',
                ),
                RoundedButton(
                  text: "send",
                  press: () {
                    registerQuest();
                  },
                ),
              ],
            ),
          ),
        ),
      ),



