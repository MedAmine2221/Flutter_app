import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:stage_project/Screens/Acceuil/components/background.dart';
import 'package:stage_project/components/rounded_access_field.dart';
import 'package:stage_project/components/rounded_button.dart';
import 'package:stage_project/components/rounded_cin_field.dart';
import 'package:stage_project/components/rounded_field.dart';
import 'package:stage_project/components/rounded_input_field.dart';
import 'package:stage_project/components/rounded_password_field.dart';

import 'package:flutter/services.dart' show rootBundle;
import 'package:yaml/yaml.dart' as yaml; // Importez le package yaml
import 'dart:convert'; // Import the dart:convert package
import 'package:path/path.dart' as path;
import 'dart:io'; // Importez dart:io pour File


class Body extends StatefulWidget {
  @override
  _BodyState createState() => _BodyState();
}

class _BodyState extends State<Body> {
  List<Map<String, dynamic>> employees = [];
  List<Map<String, dynamic>> selectedRows = [];
  int itemsPerPage = 25;
  int currentPage = 1;
  String searchQuery = '';
  String email = ''; // Store the entered email
  String password = '';
  String cin = '';
  String nom = '';
  String prenom = '';
  String role = '';
  String errorMessage = '';

  @override
  void initState() {
    super.initState();
    fetchEmployees();
  }
  void _showAlert(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.asset(
                'assets/images/verif.png', // Remplacez par le chemin de votre image
                width: 100, // Ajustez la largeur de l'image selon vos besoins
                height: 100, // Ajustez la hauteur de l'image selon vos besoins
              ),
              SizedBox(height: 10),
              Text('Registration successful',style: TextStyle(fontWeight: FontWeight.bold),),
            ],
          ),
          actions: [
            RoundedButton(
              text:'Close',
              press: () {
                Navigator.of(context).pop(); // Ferme l'alerte
              },
            ),
          ],
        );
      },
    );
  }

  void _showAlertFailed(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.asset(
                'assets/images/wrong.png', // Remplacez par le chemin de votre image
                width: 100, // Ajustez la largeur de l'image selon vos besoins
                height: 100, // Ajustez la hauteur de l'image selon vos besoins
              ),
              SizedBox(height: 10),
              Text('Registration failed',style: TextStyle(fontWeight: FontWeight.bold),),
            ],
          ),
          actions: [
            RoundedButton(
              text:'Close',
              press: () {
                Navigator.of(context).pop(); // Ferme l'alerte
              },
            ),
          ],
        );
      },
    );
  }
  Future<void> _deleteEmployee(String cin) async {
    final url = 'https://59d5-197-1-212-21.ngrok.io/supprimer_employee/$cin';

    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      // Suppression réussie, mettez à jour la liste des employés
      fetchEmployees();
    } else {
      // Gérer l'erreur de suppression
      print('Erreur lors de la suppression de l\'employé.');
    }
  }
  Future<void> _deleteSelectedEmployees() async {
    List<String> selectedCINs = selectedRows.map((employee) => employee['cin'].toString()).toList();

    final url = 'https://59d5-197-1-212-21.ngrok.io/supprimer_employees'; // Replace with your actual API endpoint

    final response = await http.post(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'cins': selectedCINs}),
    );

    if (response.statusCode == 200) {
      // Suppression réussie
      fetchEmployees(); // Mettez à jour la liste des employés après la suppression
    } else {
      // Gérer l'erreur de suppression
      print('Erreur lors de la suppression des employés.');
    }
  }
  Future<void> searchEmployees() async {
    final url = 'https://59d5-197-1-212-21.ngrok.io/rechercher_employee'; // Endpoint de recherche

    final response = await http.post(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'search_term': searchQuery}),
    );

    if (response.statusCode == 200) {
      setState(() {
        employees = List<Map<String, dynamic>>.from(json.decode(response.body));
      });
    } else {
      print('Erreur lors de la recherche des employés.');
    }
  }
  Future<void> registerUser() async {
    final url = 'https://59d5-197-1-212-21.ngrok.io/ajouter_employee'; // Replace with your actual API endpoint
    final response = await http.post(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'email': email,
        'mot_de_passe': password,
        'cin':cin,
        'nom':nom,
        'prenom':prenom,
        'role':role
      }),
    );

    if (response.statusCode == 201) {
      // Registration successful
      //print('Registration successful');
      fetchEmployees();
      _showAlert(context);
      // You can navigate to another page or show a success message here
    } else {
      // Registration failed
      _showAlertFailed(context);
      // You can show an error message here
    }
  }
  Future<void> fetchEmployees() async {
    final response = await http.get(Uri.parse('https://52aa-41-230-203-154.ngrok.io/afficher_employees'));

    if (response.statusCode == 200) {
      setState(() {
        employees = List<Map<String, dynamic>>.from(json.decode(response.body));
      });
    } else {
      print('Erreur lors de la récupération des données.');
    }
  }

  void _editEmployeeDialog(Map<String, dynamic> employee) {
    //cin = employee['cin'];
    TextEditingController cinController = TextEditingController(text: employee['cin']);
    TextEditingController prenomController = TextEditingController(text: employee['prenom']);
    TextEditingController nomController = TextEditingController(text: employee['nom']);
    TextEditingController emailController = TextEditingController(text: employee['email']);
    TextEditingController roleController = TextEditingController(text: employee['role']);

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Edit Employee'),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextField(
                  onChanged: (value) {
                    setState(() {
                      cin = value;
                    });
                  },
                  controller: cinController,
                  decoration: InputDecoration(
                    icon: Icon(
                      Icons.assignment_ind,
                      color: Colors.black,
                    ),
                    hintText: "Your CIN",
                    border: InputBorder.none,
                  ),

                ),
                SizedBox(height: 10),
                TextField(
                  onChanged: (value) {
                    setState(() {
                      prenom = value;
                    });
                  },
                  controller: prenomController,
                  decoration: InputDecoration(
                    icon: Icon(
                      Icons.person,
                      color: Colors.black,
                    ),
                    hintText: "First Name",
                    border: InputBorder.none,
                  ),

                ),
                SizedBox(height: 10),
                TextField(
                  onChanged: (value) {
                    setState(() {
                      nom = value;
                    });
                  },
                  controller: nomController,
                  decoration: InputDecoration(
                    icon: Icon(
                      Icons.person,
                      color: Colors.black,
                    ),
                    hintText: "Last Name",
                    border: InputBorder.none,
                  ),
                ),
                SizedBox(height: 10),
                TextField(
                  onChanged: (value) {
                    setState(() {
                      email = value;
                    });
                  },
                  controller: emailController,
                  decoration: InputDecoration(
                    icon: Icon(
                      Icons.email,
                      color: Colors.black,
                    ),
                    hintText: "Email",
                    border: InputBorder.none,
                  ),

                ),
                SizedBox(height: 10),
                TextField(
                  onChanged: (value) {
                    setState(() {
                      role = value;
                      if (role == 'admin' || role == 'user') {
                        errorMessage = '';
                      } else {
                        errorMessage = 'Only "admin" or "user" is allowed';
                      }
                    });
                  },
                  controller: roleController,
                  decoration: InputDecoration(
                    icon: Icon(
                      Icons.accessibility,
                      color: Colors.black,
                    ),
                    hintText: "Access",
                    border: InputBorder.none,
                  ),
                ),
                Text(
                  errorMessage,
                  style: TextStyle(color: Colors.red),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (role =='admin' || role ==  'user'){
                  _updateEmployee(employee); // Appel à la fonction de mise à jour
                }else{
                  errorMessage = 'Only "admin" or "user" is allowed';
                  _showAlertFailed(context);
                }
              },
              child: Text('Update'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Ferme la boîte de dialogue
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }
  Future<void> _updateEmployee(Map<String, dynamic> employee) async {
    final url = 'https://59d5-197-1-212-21.ngrok.io/editer_employee/${employee['cin']}';

    final response = await http.put(
      Uri.parse(url),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'new_nom': nom,
        'new_prenom': prenom,
        'new_email': email,
        'new_role': role,
      }),
    );

    if (response.statusCode == 200) {
      Navigator.of(context).pop(); // Ferme la boîte de dialogue de modification
      fetchEmployees(); // Mettre à jour la liste des employés après la mise à jour
    } else {
      // Gérer l'erreur de mise à jour
      print('Erreur lors de la mise à jour de l\'employé.');
    }
  }
  List<Map<String, dynamic>> getPaginatedEmployees() {
    int startIndex = (currentPage - 1) * itemsPerPage;
    int endIndex = startIndex + itemsPerPage;
    endIndex = endIndex > employees.length ? employees.length : endIndex;
    return employees.sublist(startIndex, endIndex);
  }
  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Background(
      child: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              "Acceuil",
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20),
            // Zone de recherche
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      onChanged: (value) {
                        setState(() {
                          searchQuery = value;
                        });
                      },
                      decoration: InputDecoration(
                        hintText: 'Search...',
                        prefixIcon: Icon(Icons.search),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.all(Radius.circular(10.0)),
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: () {
                      if (searchQuery.isEmpty) {
                        fetchEmployees(); // Afficher tous les employés lorsque le champ est vide
                      } else {
                        searchEmployees(); // Rechercher si le champ n'est pas vide
                      }
                    },
                    child: Text('Search'),
                  ),
                ],
              ),
            ),
            SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                headingRowHeight: 50,
                columns: [
                  DataColumn(label: Text('Num')),
                  DataColumn(label: Text('Picture')),
                  DataColumn(label: Text('CIN')),
                  DataColumn(label: Text('Last Name')),
                  DataColumn(label: Text('First Name')),
                  DataColumn(label: Text('Email')),
                  DataColumn(label: Text('Access')),
                  DataColumn(label: Text('Actions')),
                ],
                rows: getPaginatedEmployees().asMap().entries.map((entry) {
                  int index = entry.key;
                  Map<String, dynamic> employee = entry.value;
                  bool isSelected = selectedRows.contains(employee);
                  return DataRow(
                    cells: [
                      DataCell(Text((index + 1 + (currentPage - 1) * itemsPerPage).toString())),
                      DataCell(
                        Image.file(
                          File(employee['image']),
                          width: 50,
                          height: 50,
                          fit: BoxFit.cover,
                        ),),
                      DataCell(Text(employee['cin'])),
                      DataCell(Text(employee['nom'])),
                      DataCell(Text(employee['prenom'])),
                      DataCell(Text(employee['email'])),
                      DataCell(Text(employee['role'])),
                      DataCell(Row(
                        children: [
                          Checkbox(
                            value: isSelected,
                            onChanged: (bool? newValue) {
                              setState(() {
                                if (newValue ?? false) {
                                  selectedRows.add(employee); // Sélectionner la ligne
                                } else {
                                  selectedRows.remove(employee); // Désélectionner la ligne
                                }
                              });
                            },
                          ),

                          IconButton(
                            icon: Icon(Icons.edit,color: Colors.amber,),
                            onPressed: () {
                              _editEmployeeDialog(employee); // Appel à la fonction de modification
                            },
                          ),
                          IconButton(
                            icon: Icon(Icons.delete, color: Colors.red),
                            onPressed: () {
                              _deleteEmployee(employee['cin']); // Appel à la fonction de suppression
                              // Action de suppression
                            },
                          ),
                        ],
                      )),
                    ],
                  );
                }).toList(),
              ),
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Checkbox(
                      value: selectedRows.length == getPaginatedEmployees().length,
                      onChanged: (bool? newValue) {
                        setState(() {
                          if (newValue ?? false) {
                            selectedRows = List.from(getPaginatedEmployees());
                          } else {
                            selectedRows.clear();
                          }
                        });
                      },
                    ),
                    Text('Select all'),
                  ],
                ),

                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    IconButton(
                      icon: Icon(Icons.delete,color: Colors.red,size: size.width * 0.1),
                      onPressed: selectedRows.isNotEmpty ? _deleteSelectedEmployees : null,
                    ),
                    IconButton(
                      icon: Icon(Icons.add_box, color: Colors.lightGreen, size: size.width * 0.1),
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (BuildContext context) {
                            return AlertDialog(
                              title: Text('Add New Employee'),
                              content: SingleChildScrollView(
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    RoundedCinField(
                                      hintText: "Your CIN",
                                      onChanged: (value) {
                                        setState(() {
                                          cin = value;
                                        });
                                      },
                                    ),
                                    SizedBox(height: 10), // Add some spacing between fields
                                    RoundedField(
                                      hintText: "Your First Name",
                                      onChanged: (value) {
                                        setState(() {
                                          prenom = value;
                                        });
                                      },
                                    ),
                                    SizedBox(height: 10), // Add some spacing between fields
                                    RoundedField(
                                      hintText: "Your Last Name",
                                      onChanged: (value) {
                                        setState(() {
                                          nom = value;
                                        });
                                      },
                                    ),
                                    SizedBox(height: 10), // Add some spacing between fields
                                    RoundedInputField(
                                      hintText: "Your Email",
                                      onChanged: (value) {
                                        setState(() {
                                          email = value;
                                        });
                                      },
                                    ),
                                    SizedBox(height: 10), // Add some spacing between fields
                                    RoundedPasswordField(
                                      onChanged: (value) {
                                        setState(() {
                                          password = value;
                                        });
                                      },
                                      hintText: "Password",
                                    ),
                                    SizedBox(height: 10),
                                    RoundedAccessField(
                                      onChanged: (value) {
                                        setState(() {
                                          role = value;
                                          if (role == 'admin' || role == 'user') {
                                            errorMessage = '';
                                          } else {
                                            errorMessage = 'Only "admin" or "user" is allowed';
                                          }
                                        });
                                      }, hintText: 'Your Access',
                                    ),
                                    Text(
                                      errorMessage,
                                      style: TextStyle(color: Colors.red),
                                    ),// Add some spacing between fields
                                  ],
                                ),
                              ),
                              actions: [
                                TextButton(
                                  onPressed: () {
                                    if (role =='admin' || role ==  'user'){
                                      registerUser();
                                    }else{
                                      errorMessage = 'Only "admin" or "user" is allowed';
                                      _showAlertFailed(context);
                                    }
                                  },
                                  child: Text('Register'),
                                ),
                                TextButton(
                                  onPressed: () {
                                    Navigator.of(context).pop(); // Close the dialog
                                  },
                                  child: Text('Close'),
                                ),
                              ],
                            );
                          },
                        );
                      },
                    ),
                  ],
                ),
              ],
            ),
            SizedBox(height: 20),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                IconButton(
                  icon: Icon(Icons.arrow_back),
                  onPressed: currentPage > 1
                      ? () {
                    setState(() {
                      currentPage--;
                    });
                  }
                      : null,
                ),
                Text('Page $currentPage'),
                IconButton(
                  icon: Icon(Icons.arrow_forward),
                  onPressed: currentPage < (employees.length / itemsPerPage).ceil()
                      ? () {
                    setState(() {
                      currentPage++;
                    });
                  }
                      : null,
                ),
              ],
            ),
            SizedBox(height: 20),
            Text('Number of items per page:'),
            DropdownButton<int>(
              value: itemsPerPage,
              onChanged: (int? newValue) {
                setState(() {
                  itemsPerPage = newValue ?? 25;
                  currentPage = 1; // Réinitialiser la page lorsque l'élément par page change
                });
              },

              items: [25, 50, 100].map<DropdownMenuItem<int>>((int value) {
                return DropdownMenuItem<int>(
                  value: value,
                  child: Text(value.toString()),
                );

              }).toList(),

            ),
          ],

        ),

      ),
    );
  }
}