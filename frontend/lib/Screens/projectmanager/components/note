








import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class Body extends StatefulWidget {
  @override
  _BodyState createState() => _BodyState();
}

class _BodyState extends State<Body> {
  List<dynamic> projectsAndTasks = [];

  Future<void> fetchData() async {
    final response = await http.get(Uri.parse('https://541a-196-226-1-251.ngrok.io/afficher_projets_et_taches'));
    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        projectsAndTasks = data['projets_et_taches'];
      });
    } else {
      throw Exception('Failed to load data');
    }
  }

  Map<String, dynamic> getAggregatedData() {
    Map<String, dynamic> aggregatedData = {};

    for (var projectTask in projectsAndTasks) {
      final projetSujet = projectTask['projet_sujet'];
      if (!aggregatedData.containsKey(projetSujet)) {
        aggregatedData[projetSujet] = {
          'taskDescriptions': [],
          'taskDatesDebut': [],
          'taskDatesFin': [],
          // ... Other attributes ...
        };
      }

      aggregatedData[projetSujet]['taskDescriptions'].add(projectTask['tasks'][0]['task_description']);
      aggregatedData[projetSujet]['taskDatesDebut'].add(projectTask['tasks'][0]['task_date_debut']);
      aggregatedData[projetSujet]['taskDatesFin'].add(projectTask['tasks'][0]['task_date_fin']);
      // ... Other attributes ...
    }

    return aggregatedData;
  }

  @override
  void initState() {
    super.initState();
    fetchData();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;

    return Scaffold(
      appBar: AppBar(title: Text('Grouped Table Example')),
      body: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: DataTable(
          columnSpacing: 16.0,
          columns: [
            DataColumn(label: Text('Project')),
            DataColumn(label: Text('Task/Done')),
            DataColumn(label: Text('Start')),
            DataColumn(label: Text('End')),
            DataColumn(label: Text('Action')),
            // ... Other columns ...
          ],
          rows: getAggregatedData().entries.map<DataRow>((entry) {
            final projetSujet = entry.key;
            final taskDescriptions = entry.value['taskDescriptions'];
            final taskDatesDebut = entry.value['taskDatesDebut'];
            final taskDatesFin = entry.value['taskDatesFin'];
            // ... Other attributes ...

            return DataRow(
              cells: [
                DataCell(Text(projetSujet)),
                DataCell(Text(taskDescriptions.join('\n'))),
                DataCell(Text(taskDatesDebut.join('\n'))),
                DataCell(Text(taskDatesFin.join('\n'))),
                DataCell(
                  TextButton(
                  onPressed: () {},
                  child: Text('Add new tasks'),
                ),),
                // ... Other cells ...
              ],
            );
          }).toList(),
        ),
      ),
    );
  }
}